name: Build Pi-Star OTA Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 2024.01.15)'
        required: true
        type: string
      pi_star_mode:
        description: 'Pi-Star Installation Mode'
        required: true
        type: choice
        options:
          - 'placeholder'
          - 'docker'
          - 'native'
        default: 'placeholder'

env:
  BUILD_ARCH: armhf
  ALPINE_VERSION: 3.19

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-user-static \
            debootstrap \
            binfmt-support \
            openssl \
            curl \
            wget \
            rsync

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF_NAME#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Cache Alpine rootfs
        uses: actions/cache@v4
        with:
          path: /tmp/alpine-cache
          key: alpine-${{ env.ALPINE_VERSION }}-${{ env.BUILD_ARCH }}-v2

      - name: Download Alpine mini rootfs
        run: |
          mkdir -p /tmp/alpine-cache
          if [ ! -f /tmp/alpine-cache/alpine-minirootfs.tar.gz ]; then
            wget -O /tmp/alpine-cache/alpine-minirootfs.tar.gz \
              "https://dl-cdn.alpinelinux.org/alpine/v${{ env.ALPINE_VERSION }}/releases/${{ env.BUILD_ARCH }}/alpine-minirootfs-${{ env.ALPINE_VERSION }}.1-${{ env.BUILD_ARCH }}.tar.gz"
          fi

      - name: Prepare signing keys
        run: |
          mkdir -p keys
          echo "${{ secrets.UPDATE_PRIVATE_KEY }}" > keys/private.pem
          echo "${{ secrets.UPDATE_PUBLIC_KEY }}" > keys/public.pem
          chmod 600 keys/private.pem

      - name: Build root filesystem
        run: |
          sudo chmod +x build/*.sh
          sudo ./build/build-rootfs.sh \
            "${{ steps.version.outputs.VERSION }}" \
            "${{ github.event.inputs.pi_star_mode || 'placeholder' }}"
        env:
          BUILD_DIR: /tmp/pi-star-build
          CACHE_DIR: /tmp/alpine-cache

      - name: Package and sign update
        run: |
          sudo ./build/package-update.sh \
            "${{ steps.version.outputs.VERSION }}" \
            "/tmp/pi-star-build/rootfs" \
            "output"

      - name: Generate update metadata
        run: |
          cat > output/release-info.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "pi_star_mode": "${{ github.event.inputs.pi_star_mode || 'placeholder' }}",
            "architecture": "${{ env.BUILD_ARCH }}",
            "alpine_version": "${{ env.ALPINE_VERSION }}",
            "files": {
              "update": "pi-star-${{ steps.version.outputs.VERSION }}.tar.gz",
              "signature": "pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig",
              "checksum": "$(sha256sum output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz | cut -d' ' -f1)"
            }
          }
          EOF

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pi-star-update-${{ steps.version.outputs.VERSION }}
          path: output/*
          retention-days: 90

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig
            output/release-info.json
          body: |
            ## Pi-Star OTA Update v${{ steps.version.outputs.VERSION }}
            
            **Build Information:**
            - Version: ${{ steps.version.outputs.VERSION }}
            - Pi-Star Mode: ${{ github.event.inputs.pi_star_mode || 'placeholder' }}
            - Architecture: ${{ env.BUILD_ARCH }}
            - Alpine Version: ${{ env.ALPINE_VERSION }}
            - Build Date: $(date -u +%Y-%m-%d)
            
            **Files:**
            - `pi-star-${{ steps.version.outputs.VERSION }}.tar.gz` - Update package
            - `pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig` - Digital signature
            - `release-info.json` - Build metadata
            
            **Installation:**
            This update package is designed for the Pi-Star A/B partition OTA system.
            Devices will automatically download and install this update.
            
            **Verification:**
            \`\`\`bash
            openssl dgst -sha256 -verify public-key.pem \\
              -signature pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig \\
              pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            \`\`\`
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Prepare update server files
          mkdir -p pages
          cp output/* pages/
          cp server/* pages/
          
          # Generate latest.json for update API
          cat > pages/latest.json << EOF
          {
            "latest_version": "${{ steps.version.outputs.VERSION }}",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz",
            "signature_url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig",
            "checksum": "$(sha256sum output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz | cut -d' ' -f1)",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "min_version": "2024.01.01"
          }
          EOF

      - name: Deploy to GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          cname: updates.mw0mwz.com
