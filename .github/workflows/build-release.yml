name: Build Pi-Star OTA Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version (e.g., 2024.01.15)'
        required: true
        type: string
      pi_star_mode:
        description: 'Pi-Star Installation Mode'
        required: true
        type: choice
        options:
          - 'placeholder'
          - 'docker'
          - 'native'
        default: 'placeholder'

env:
  BUILD_ARCH: armhf
  ALPINE_VERSION: 3.22  # Updated to current stable version

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      pages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qemu-user-static \
            debootstrap \
            binfmt-support \
            openssl \
            curl \
            wget \
            rsync

      - name: Set version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${GITHUB_REF_NAME#v}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Cache Alpine rootfs
        uses: actions/cache@v4
        with:
          path: /tmp/alpine-cache
          key: alpine-${{ env.ALPINE_VERSION }}-${{ env.BUILD_ARCH }}-v3  # Updated cache version

      - name: Download Alpine mini rootfs
        run: |
          mkdir -p /tmp/alpine-cache
          if [ ! -f /tmp/alpine-cache/alpine-minirootfs.tar.gz ]; then
            # Updated download URL for Alpine 3.22 armhf
            wget -O /tmp/alpine-cache/alpine-minirootfs.tar.gz \
              "https://dl-cdn.alpinelinux.org/alpine/v${{ env.ALPINE_VERSION }}/releases/${{ env.BUILD_ARCH }}/alpine-minirootfs-${{ env.ALPINE_VERSION }}.0-${{ env.BUILD_ARCH }}.tar.gz"
            
            # Verify download was successful
            if [ ! -s /tmp/alpine-cache/alpine-minirootfs.tar.gz ]; then
              echo "Failed to download Alpine rootfs, trying alternative URL..."
              rm -f /tmp/alpine-cache/alpine-minirootfs.tar.gz
              wget -O /tmp/alpine-cache/alpine-minirootfs.tar.gz \
                "https://dl-cdn.alpinelinux.org/alpine/v${{ env.ALPINE_VERSION }}/releases/${{ env.BUILD_ARCH }}/alpine-minirootfs-${{ env.ALPINE_VERSION }}.1-${{ env.BUILD_ARCH }}.tar.gz"
            fi
            
            # Final verification
            if [ ! -s /tmp/alpine-cache/alpine-minirootfs.tar.gz ]; then
              echo "ERROR: Failed to download Alpine mini rootfs"
              exit 1
            fi
            
            echo "Downloaded Alpine rootfs size: $(ls -lh /tmp/alpine-cache/alpine-minirootfs.tar.gz)"
          fi

      - name: Prepare signing keys
        run: |
          mkdir -p keys
          echo "${{ secrets.UPDATE_PRIVATE_KEY }}" > keys/private.pem
          echo "${{ secrets.UPDATE_PUBLIC_KEY }}" > keys/public.pem
          chmod 600 keys/private.pem

      - name: Build root filesystem
        run: |
          sudo chmod +x build/*.sh
          sudo -E ./build/build-rootfs.sh "${{ steps.version.outputs.VERSION }}" "${{ github.event.inputs.pi_star_mode || 'placeholder' }}"
        env:
          BUILD_DIR: /tmp/pi-star-build
          CACHE_DIR: /tmp/alpine-cache
          GITHUB_WORKSPACE: ${{ github.workspace }}
          ALPINE_VERSION: ${{ env.ALPINE_VERSION }}

      - name: Build SD card image
        run: |
          sudo -E ./build/build-sd-image.sh "${{ steps.version.outputs.VERSION }}" "pi-star-${{ steps.version.outputs.VERSION }}.img"
        env:
          BUILD_DIR: /tmp/pi-star-image-build
          GITHUB_WORKSPACE: ${{ github.workspace }}

      - name: Create package-update.sh if missing
        run: |
          if [ ! -f "build/package-update.sh" ]; then
            mkdir -p build
            cat > build/package-update.sh << 'EOF'
          #!/bin/bash
          set -e
          
          VERSION="$1"
          ROOTFS_DIR="$2"
          OUTPUT_DIR="$3"
          
          if [ -z "$VERSION" ] || [ -z "$ROOTFS_DIR" ] || [ -z "$OUTPUT_DIR" ]; then
              echo "Usage: $0 <version> <rootfs_dir> <output_dir>"
              exit 1
          fi
          
          echo "Packaging Pi-Star update v${VERSION}..."
          
          # Create output directory
          mkdir -p "$OUTPUT_DIR"
          
          # Create the package
          cd "$ROOTFS_DIR"
          tar -czf "${OUTPUT_DIR}/pi-star-${VERSION}.tar.gz" \
              --exclude="./proc/*" \
              --exclude="./sys/*" \
              --exclude="./dev/*" \
              --exclude="./tmp/*" \
              --exclude="./var/cache/*" \
              --owner=0 --group=0 .
          
          # Sign if possible - FIXED PATH
          if [ -f "${GITHUB_WORKSPACE}/keys/private.pem" ]; then
              echo "Signing package..."
              openssl dgst -sha256 -sign "${GITHUB_WORKSPACE}/keys/private.pem" \
                  -out "${OUTPUT_DIR}/pi-star-${VERSION}.tar.gz.sig" \
                  "${OUTPUT_DIR}/pi-star-${VERSION}.tar.gz"
              echo "Package signed successfully"
          else
              echo "Warning: Private key not found at ${GITHUB_WORKSPACE}/keys/private.pem - package will not be signed"
              echo "Available files in keys directory:"
              ls -la "${GITHUB_WORKSPACE}/keys/" 2>/dev/null || echo "Keys directory not found"
          fi
          
          echo "Package created: pi-star-${VERSION}.tar.gz"
          EOF
            chmod +x build/package-update.sh
          fi

      - name: Package and sign update
        run: |
          sudo -E ./build/package-update.sh \
            "${{ steps.version.outputs.VERSION }}" \
            "/tmp/pi-star-build/rootfs" \
            "output"

      - name: Generate update metadata
        run: |
          # Ensure output directory exists and is writable
          mkdir -p output
          sudo chown -R $USER:$USER output
          sudo chmod -R 755 output
          
          # Verify the package file exists
          if [ ! -f "output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz" ]; then
            echo "Error: Package file not found"
            ls -la output/
            exit 1
          fi
          
          cat > output/release-info.json << EOF
          {
            "version": "${{ steps.version.outputs.VERSION }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "pi_star_mode": "${{ github.event.inputs.pi_star_mode || 'placeholder' }}",
            "architecture": "${{ env.BUILD_ARCH }}",
            "alpine_version": "${{ env.ALPINE_VERSION }}",
            "files": {
              "update": "pi-star-${{ steps.version.outputs.VERSION }}.tar.gz",
              "signature": "pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig",
              "checksum": "$(sha256sum output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz | cut -d' ' -f1)"
            }
          }
          EOF
          
          echo "Generated release-info.json:"
          cat output/release-info.json

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: pi-star-update-${{ steps.version.outputs.VERSION }}
          path: |
            output/*
            /tmp/pi-star-image-build/pi-star-${{ steps.version.outputs.VERSION }}.img.gz
          retention-days: 90

      - name: Set build date
        id: build_date
        run: |
          BUILD_DATE=$(date -u +%Y-%m-%d)
          echo "DATE=$BUILD_DATE" >> $GITHUB_OUTPUT
          echo "Build date: $BUILD_DATE"

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig
            output/release-info.json
            /tmp/pi-star-image-build/pi-star-${{ steps.version.outputs.VERSION }}.img.gz
          body: |
            ## Pi-Star OTA Update v${{ steps.version.outputs.VERSION }}
            
            **Build Information:**
            - Version: ${{ steps.version.outputs.VERSION }}
            - Pi-Star Mode: ${{ github.event.inputs.pi_star_mode || 'placeholder' }}
            - Architecture: ${{ env.BUILD_ARCH }}
            - Alpine Version: ${{ env.ALPINE_VERSION }}
            - Build Date: ${{ steps.build_date.outputs.DATE }}
            
            **Files:**
            - `pi-star-${{ steps.version.outputs.VERSION }}.tar.gz` - Update package for existing installations (OTA)
            - `pi-star-${{ steps.version.outputs.VERSION }}.img.gz` - Complete SD card image for new installations
            - `pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig` - Digital signature for update package
            - `release-info.json` - Build metadata and checksums
            
            **Installation:**
            
            *For new installations:*
            ```bash
            # Download and flash SD card image (2GB+ SD card required)
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.img.gz
            gunzip -c pi-star-${{ steps.version.outputs.VERSION }}.img.gz | sudo dd of=/dev/sdX bs=4M status=progress
            ```
            
            *For existing Pi-Star installations:*
            
            This update package is designed for the Pi-Star A/B partition OTA system. Devices will automatically download and install this update, or you can install manually:
            
            ```bash
            # Manual OTA update installation
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            sudo /usr/local/bin/install-update pi-star-${{ steps.version.outputs.VERSION }}.tar.gz ${{ steps.version.outputs.VERSION }}
            ```
            
            **Verification:**
            
            All packages are cryptographically signed. To verify integrity:
            
            ```bash
            # Download the files
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig
            
            # Get the public key from the repository
            wget https://raw.githubusercontent.com/${{ github.repository }}/main/keys/public.pem
            
            # Verify the signature
            openssl dgst -sha256 -verify public.pem \
              -signature pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig \
              pi-star-${{ steps.version.outputs.VERSION }}.tar.gz
            ```
            
            **First Boot Configuration:**
            
            For new SD card installations, you can configure the system by creating `/boot/pistar-config.txt` on the SD card before first boot:
            
            ```ini
            # Essential Configuration
            wifi_ssid=YourWiFiNetwork
            wifi_password=YourWiFiPassword
            user_password=YourSecurePassword
            
            # Optional Settings
            hostname=pi-star
            timezone=Europe/London
            ssh_key=ssh-rsa AAAAB3NzaC1yc2EAAAA... your-email@example.com
            
            # Pi-Star Settings
            callsign=M0ABC
            dmr_id=1234567
            ```
            
            **Security Notes:**
            - Default SSH access requires key authentication (no passwords)
            - Root account is disabled by default
            - User `pi-star` has passwordless sudo access
            - Configure passwords and SSH keys via boot configuration file
            
            ---
            
            📡 **Update Server:** https://version.pistar.uk
            
            🔧 **Repository:** https://github.com/${{ github.repository }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Update GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        run: |
          # Prepare update server files
          mkdir -p pages
          cp output/* pages/
          
          # Copy server files if they exist
          if [ -d "server" ]; then
            cp server/* pages/
          fi
          
          # Generate latest.json for update API
          cat > pages/latest.json << EOF
          {
            "latest_version": "${{ steps.version.outputs.VERSION }}",
            "download_url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz",
            "signature_url": "https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.VERSION }}/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz.sig",
            "checksum": "$(sha256sum output/pi-star-${{ steps.version.outputs.VERSION }}.tar.gz | cut -d' ' -f1)",
            "release_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "min_version": "2024.01.01",
            "alpine_version": "${{ env.ALPINE_VERSION }}",
            "architecture": "${{ env.BUILD_ARCH }}"
          }
          EOF

      - name: Deploy to GitHub Pages
        if: startsWith(github.ref, 'refs/tags/')
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./pages
          publish_branch: update-server
          cname: version.pistar.uk
